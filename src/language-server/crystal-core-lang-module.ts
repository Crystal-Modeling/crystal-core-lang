import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject, LangiumSharedServices
} from 'langium';
import { BehaviorModule, BehaviorServices } from './behavior/behavior-module';
import { registerBehaviorValidationChecks } from './behavior/validation/behavior-validation';
import { ClassifierModule, ClassifierServices } from './classifier/classifier-module';
import { registerClassifierValidationChecks } from './classifier/validation/classifier-validation';
import { BehaviorGeneratedModule, ClassifierGeneratedModule, CrystalCoreLanguageGeneratedSharedModule } from './generated/module';


/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createCrystalCoreLanguageServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    behavior: BehaviorServices,
    classifier: ClassifierServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        CrystalCoreLanguageGeneratedSharedModule
    );
    const behavior = inject(
        createDefaultModule({ shared }),
        BehaviorGeneratedModule,
        BehaviorModule
    );
    const classifier = inject(
        createDefaultModule({ shared }),
        ClassifierGeneratedModule,
        ClassifierModule
    );
    shared.ServiceRegistry.register(behavior);
    shared.ServiceRegistry.register(classifier);
    registerBehaviorValidationChecks(behavior);
    registerClassifierValidationChecks(classifier);
    return { shared, behavior, classifier };
}
